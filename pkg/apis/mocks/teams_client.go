// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/google/go-github/v41/github"
)

type TeamsClient struct {
	GetTeamMembershipBySlugStub        func(context.Context, string, string, string) (*github.Membership, *github.Response, error)
	getTeamMembershipBySlugMutex       sync.RWMutex
	getTeamMembershipBySlugArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getTeamMembershipBySlugReturns struct {
		result1 *github.Membership
		result2 *github.Response
		result3 error
	}
	getTeamMembershipBySlugReturnsOnCall map[int]struct {
		result1 *github.Membership
		result2 *github.Response
		result3 error
	}
	ListTeamReposBySlugStub        func(context.Context, string, string, *github.ListOptions) ([]*github.Repository, *github.Response, error)
	listTeamReposBySlugMutex       sync.RWMutex
	listTeamReposBySlugArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.ListOptions
	}
	listTeamReposBySlugReturns struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}
	listTeamReposBySlugReturnsOnCall map[int]struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TeamsClient) GetTeamMembershipBySlug(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*github.Membership, *github.Response, error) {
	fake.getTeamMembershipBySlugMutex.Lock()
	ret, specificReturn := fake.getTeamMembershipBySlugReturnsOnCall[len(fake.getTeamMembershipBySlugArgsForCall)]
	fake.getTeamMembershipBySlugArgsForCall = append(fake.getTeamMembershipBySlugArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetTeamMembershipBySlugStub
	fakeReturns := fake.getTeamMembershipBySlugReturns
	fake.recordInvocation("GetTeamMembershipBySlug", []interface{}{arg1, arg2, arg3, arg4})
	fake.getTeamMembershipBySlugMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *TeamsClient) GetTeamMembershipBySlugCallCount() int {
	fake.getTeamMembershipBySlugMutex.RLock()
	defer fake.getTeamMembershipBySlugMutex.RUnlock()
	return len(fake.getTeamMembershipBySlugArgsForCall)
}

func (fake *TeamsClient) GetTeamMembershipBySlugCalls(stub func(context.Context, string, string, string) (*github.Membership, *github.Response, error)) {
	fake.getTeamMembershipBySlugMutex.Lock()
	defer fake.getTeamMembershipBySlugMutex.Unlock()
	fake.GetTeamMembershipBySlugStub = stub
}

func (fake *TeamsClient) GetTeamMembershipBySlugArgsForCall(i int) (context.Context, string, string, string) {
	fake.getTeamMembershipBySlugMutex.RLock()
	defer fake.getTeamMembershipBySlugMutex.RUnlock()
	argsForCall := fake.getTeamMembershipBySlugArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *TeamsClient) GetTeamMembershipBySlugReturns(result1 *github.Membership, result2 *github.Response, result3 error) {
	fake.getTeamMembershipBySlugMutex.Lock()
	defer fake.getTeamMembershipBySlugMutex.Unlock()
	fake.GetTeamMembershipBySlugStub = nil
	fake.getTeamMembershipBySlugReturns = struct {
		result1 *github.Membership
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *TeamsClient) GetTeamMembershipBySlugReturnsOnCall(i int, result1 *github.Membership, result2 *github.Response, result3 error) {
	fake.getTeamMembershipBySlugMutex.Lock()
	defer fake.getTeamMembershipBySlugMutex.Unlock()
	fake.GetTeamMembershipBySlugStub = nil
	if fake.getTeamMembershipBySlugReturnsOnCall == nil {
		fake.getTeamMembershipBySlugReturnsOnCall = make(map[int]struct {
			result1 *github.Membership
			result2 *github.Response
			result3 error
		})
	}
	fake.getTeamMembershipBySlugReturnsOnCall[i] = struct {
		result1 *github.Membership
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *TeamsClient) ListTeamReposBySlug(arg1 context.Context, arg2 string, arg3 string, arg4 *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	fake.listTeamReposBySlugMutex.Lock()
	ret, specificReturn := fake.listTeamReposBySlugReturnsOnCall[len(fake.listTeamReposBySlugArgsForCall)]
	fake.listTeamReposBySlugArgsForCall = append(fake.listTeamReposBySlugArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.ListOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListTeamReposBySlugStub
	fakeReturns := fake.listTeamReposBySlugReturns
	fake.recordInvocation("ListTeamReposBySlug", []interface{}{arg1, arg2, arg3, arg4})
	fake.listTeamReposBySlugMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *TeamsClient) ListTeamReposBySlugCallCount() int {
	fake.listTeamReposBySlugMutex.RLock()
	defer fake.listTeamReposBySlugMutex.RUnlock()
	return len(fake.listTeamReposBySlugArgsForCall)
}

func (fake *TeamsClient) ListTeamReposBySlugCalls(stub func(context.Context, string, string, *github.ListOptions) ([]*github.Repository, *github.Response, error)) {
	fake.listTeamReposBySlugMutex.Lock()
	defer fake.listTeamReposBySlugMutex.Unlock()
	fake.ListTeamReposBySlugStub = stub
}

func (fake *TeamsClient) ListTeamReposBySlugArgsForCall(i int) (context.Context, string, string, *github.ListOptions) {
	fake.listTeamReposBySlugMutex.RLock()
	defer fake.listTeamReposBySlugMutex.RUnlock()
	argsForCall := fake.listTeamReposBySlugArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *TeamsClient) ListTeamReposBySlugReturns(result1 []*github.Repository, result2 *github.Response, result3 error) {
	fake.listTeamReposBySlugMutex.Lock()
	defer fake.listTeamReposBySlugMutex.Unlock()
	fake.ListTeamReposBySlugStub = nil
	fake.listTeamReposBySlugReturns = struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *TeamsClient) ListTeamReposBySlugReturnsOnCall(i int, result1 []*github.Repository, result2 *github.Response, result3 error) {
	fake.listTeamReposBySlugMutex.Lock()
	defer fake.listTeamReposBySlugMutex.Unlock()
	fake.ListTeamReposBySlugStub = nil
	if fake.listTeamReposBySlugReturnsOnCall == nil {
		fake.listTeamReposBySlugReturnsOnCall = make(map[int]struct {
			result1 []*github.Repository
			result2 *github.Response
			result3 error
		})
	}
	fake.listTeamReposBySlugReturnsOnCall[i] = struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *TeamsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTeamMembershipBySlugMutex.RLock()
	defer fake.getTeamMembershipBySlugMutex.RUnlock()
	fake.listTeamReposBySlugMutex.RLock()
	defer fake.listTeamReposBySlugMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TeamsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
